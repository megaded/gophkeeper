// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: keeper.proto

package keeper

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KeeperServer_Registration_FullMethodName   = "/keeper_proto.KeeperServer/registration"
	KeeperServer_Login_FullMethodName          = "/keeper_proto.KeeperServer/login"
	KeeperServer_AddCredentials_FullMethodName = "/keeper_proto.KeeperServer/addCredentials"
)

// KeeperServerClient is the client API for KeeperServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeeperServerClient interface {
	Registration(ctx context.Context, in *NewUserRequest, opts ...grpc.CallOption) (*NewUserResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	AddCredentials(ctx context.Context, in *AddCredentialsRequest, opts ...grpc.CallOption) (*AddCredentialsResponse, error)
}

type keeperServerClient struct {
	cc grpc.ClientConnInterface
}

func NewKeeperServerClient(cc grpc.ClientConnInterface) KeeperServerClient {
	return &keeperServerClient{cc}
}

func (c *keeperServerClient) Registration(ctx context.Context, in *NewUserRequest, opts ...grpc.CallOption) (*NewUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewUserResponse)
	err := c.cc.Invoke(ctx, KeeperServer_Registration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperServerClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, KeeperServer_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperServerClient) AddCredentials(ctx context.Context, in *AddCredentialsRequest, opts ...grpc.CallOption) (*AddCredentialsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCredentialsResponse)
	err := c.cc.Invoke(ctx, KeeperServer_AddCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeeperServerServer is the server API for KeeperServer service.
// All implementations must embed UnimplementedKeeperServerServer
// for forward compatibility.
type KeeperServerServer interface {
	Registration(context.Context, *NewUserRequest) (*NewUserResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	AddCredentials(context.Context, *AddCredentialsRequest) (*AddCredentialsResponse, error)
	mustEmbedUnimplementedKeeperServerServer()
}

// UnimplementedKeeperServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKeeperServerServer struct{}

func (UnimplementedKeeperServerServer) Registration(context.Context, *NewUserRequest) (*NewUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Registration not implemented")
}
func (UnimplementedKeeperServerServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedKeeperServerServer) AddCredentials(context.Context, *AddCredentialsRequest) (*AddCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCredentials not implemented")
}
func (UnimplementedKeeperServerServer) mustEmbedUnimplementedKeeperServerServer() {}
func (UnimplementedKeeperServerServer) testEmbeddedByValue()                      {}

// UnsafeKeeperServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeeperServerServer will
// result in compilation errors.
type UnsafeKeeperServerServer interface {
	mustEmbedUnimplementedKeeperServerServer()
}

func RegisterKeeperServerServer(s grpc.ServiceRegistrar, srv KeeperServerServer) {
	// If the following call pancis, it indicates UnimplementedKeeperServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KeeperServer_ServiceDesc, srv)
}

func _KeeperServer_Registration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServerServer).Registration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeeperServer_Registration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServerServer).Registration(ctx, req.(*NewUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeeperServer_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServerServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeeperServer_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServerServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeeperServer_AddCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServerServer).AddCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeeperServer_AddCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServerServer).AddCredentials(ctx, req.(*AddCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeeperServer_ServiceDesc is the grpc.ServiceDesc for KeeperServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeeperServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keeper_proto.KeeperServer",
	HandlerType: (*KeeperServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "registration",
			Handler:    _KeeperServer_Registration_Handler,
		},
		{
			MethodName: "login",
			Handler:    _KeeperServer_Login_Handler,
		},
		{
			MethodName: "addCredentials",
			Handler:    _KeeperServer_AddCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keeper.proto",
}
